pipeline {
  agent {
    kubernetes {
      // Sử dụng PodTemplate để xây dựng Jenkins agent
      yaml '''
      apiVersion: v1
      kind: Pod
      spec:
        containers:
        - name: jenkins-agent
          image: dumln86/jenkins-agent:1.0.4
          command:
          - cat
      '''
    }
  }
  environment {
    KUBE_NAMESPACE = 'devops-tools'
    APP_NAME = 'springboot-crud-k8s'
    APP_PATH = 'springboot-crud-k8s'
    RELEASE = '1.0.0'
    DOCKER_USER = 'dumln86'
    DOCKER_PASS = 'dockerhub'
    IMAGE_NAME = "${DOCKER_USER}" + '/' + "${APP_NAME}"
    IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
    KUBECTL_PATH = "${JENKINS_HOME}/kubectl"
    /* JENKINS_API_TOKEN = credentials("JENKINS_API_TOKEN") */
  }

  stages {
    stage('Cleanup Workspace') {
      steps {
        cleanWs()
      }
    }

    stage('Checkout from SCM') {
      steps {
        git branch: 'main', credentialsId: 'github', url: 'https://github.com/dumln86/e2e-pipeline'
      }
    }

    stage('Build Maven project') {
      steps {
        sh 'mvn clean install'
      }
    }

    stage('Build & Push docker image with Kaniko') {
      steps {
        sh 'cd `pwd`/${APP_PATH}'
        sh '/kaniko/executor --dockerfile `pwd`/${APP_PATH}/Dockerfile --context `pwd`/${APP_PATH} --destination=${IMAGE_NAME}:${IMAGE_TAG}'
      }
    }
    stage('Deploy to Kubernetes') {
      steps {
        // Deploy to Kubernetes using the Kubernetes plugin
        sh 'pwd'
        sh 'cd ${APP_PATH}'
        sh 'sed -i "s/__IMAGE_TAG__/${IMAGE_TAG}/g" k8s/deployment.yaml'
        sh './kubectl apply -f k8s'
      }
    }
  }

      post {
        success {
      echo 'Deployment successful!'
        }
        failure {
      echo 'Deployment failed!'
        }
      }
}
